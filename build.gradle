// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ext {
        jacoco_version = "0.8.7"
    }
    dependencies {
        classpath 'com.google.dagger:hilt-android-gradle-plugin:2.42'
    }
}

plugins {
    id 'com.android.application' version '7.2.1' apply false
    id 'org.jetbrains.kotlin.android' version '1.7.0' apply false
}

apply plugin: 'jacoco'

jacoco {
    toolVersion = jacoco_version
}

allprojects {
    configurations.all {
        resolutionStrategy {
            eachDependency { details ->
                if ("org.jacoco" == details.requested.group) {
                    details.useVersion jacoco_version
                }
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}


def coverageExclusion = [
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.class',
        '**/Manifest.class',
        '**/Manifest$*.class',
        '**/*$InjectAdapter.class',
        '**/*$ModuleAdapter.class',
        '**/*$ViewInjector*.class',
        '**/*_MembersInjector.class',
        '**/Dagger*Component.class',
        '**/Dagger*Component$Builder.class',
        '**/*Module_*Factory.class',
        '**/*$ViewInjector*.*',
        '**/*$ViewBinder*.*',
        '**/*Module.*',
        '**/*Application.*',
        // Necessary for Workaround #3 (see README.md)
        '**/*Hilt*',
        '**/*ViewModelLazy*',
        '**/*Fragment.special*',
        '**/*_Factory*',
        '**/*_Component*',
        '**/*_Generated*',
]

def coverageKotlinClassDirectories = [
        fileTree(dir: project.projectDir,
                include: "**/build/tmp/kotlin-classes/debug*/**",
                exclude: "**/build/tmp/kotlin-classes/debug*Test/**")
]
def workaroundClassDirectories = [
        fileTree(dir: project.projectDir,
                include: "**/build/intermediates/asm_instrumented_project_classes/debug/")
]
def coverageJavaClassDirectories = [
        fileTree(dir: project.projectDir,
                include: "**/build/intermediates/classes/debug*/**",
                exclude: "**/build/intermediates/classes/debug*Test/**")
]

task rootCodeCoverageReport(
        type: JacocoReport,
        dependsOn: ["app:createDebugAndroidTestCoverageReport",
                    "app:testDebugUnitTest"]
) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.required = true
        html.required = true
    }
    sourceDirectories.from = fileTree(dir: project.projectDir, include: "**/src/main")
    classDirectories.from = files(coverageJavaClassDirectories, coverageKotlinClassDirectories).collect {
        fileTree(dir: it, include: "**/*.class", exclude: coverageExclusion)
    }

    // Uncomment for Workaround #3 (see README.md)
//    classDirectories.from = files(coverageJavaClassDirectories, workaroundClassDirectories).collect {
//        fileTree(dir: it, include: "**/*.class", exclude: coverageExclusion)
//    }

    executionData.from = fileTree(dir: project.projectDir, includes: ["**/*.exec", "**/*.ec"])
    outputs.upToDateWhen { false }
}
